'use client';

/**
 * Player Statistics Dashboard
 *
 * Powered by Hedera Consensus Service (HCS)
 * - Aggregates all player actions from HCS
 * - Shows win rate, earnings, favorite actions
 * - Displays game history
 */

import { useState, useEffect } from 'react';
import {
  getPlayerStats,
  getPlayerGameHistory,
  getPlayerRank,
  getLeaderboard,
  type PlayerStats,
  type GameSummary,
} from '~/lib/hedera/stats';
import { Skeleton } from '~/components/ui/skeleton';
import { cn } from '~/lib/utils';
import { Trophy, TrendingUp, Target, Zap } from 'lucide-react';

interface PlayerStatsDashboardProps {
  playerAddress: string;
  className?: string;
}

export function PlayerStatsDashboard({
  playerAddress,
  className,
}: PlayerStatsDashboardProps) {
  const [stats, setStats] = useState<PlayerStats | null>(null);
  const [history, setHistory] = useState<GameSummary[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    async function loadStats() {
      try {
        setLoading(true);
        const [statsData, historyData] = await Promise.all([
          getPlayerStats(playerAddress),
          getPlayerGameHistory(playerAddress, 10),
        ]);
        setStats(statsData);
        setHistory(historyData);
      } catch (error) {
        console.error('Failed to load stats:', error);
      } finally {
        setLoading(false);
      }
    }

    loadStats();
  }, [playerAddress]);

  if (loading) {
    return (
      <div className={cn('space-y-4', className)}>
        <Skeleton className="h-32 w-full" />
        <Skeleton className="h-64 w-full" />
      </div>
    );
  }

  if (!stats) {
    return (
      <div className={cn('border rounded-lg p-6', className)}>
        <p className="text-muted-foreground">
          No statistics available. Play some games to see your stats!
        </p>
      </div>
    );
  }

  const rank = getPlayerRank(stats);
  const netWinnings = stats.totalWinnings - stats.totalLosses;

  return (
    <div className={cn('space-y-6', className)}>
      {/* Rank Badge */}
      <div className="border rounded-lg p-6 bg-gradient-to-br from-primary/10 to-primary/5">
        <div className="flex items-center justify-between">
          <div>
            <p className="text-sm text-muted-foreground mb-1">Your Rank</p>
            <h2
              className="text-3xl font-bold"
              style={{ color: rank.color !== 'gray' ? rank.color : undefined }}
            >
              {rank.name}
            </h2>
            <p className="text-sm text-muted-foreground">Tier {rank.tier}</p>
          </div>
          <Trophy className="h-16 w-16 text-primary opacity-20" />
        </div>
      </div>

      {/* Key Stats Grid */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
        <StatCard
          icon={<TrendingUp className="h-5 w-5" />}
          label="Win Rate"
          value={`${stats.winRate.toFixed(1)}%`}
          trend={stats.winRate >= 50 ? 'up' : 'down'}
        />
        <StatCard
          icon={<Trophy className="h-5 w-5" />}
          label="Games Won"
          value={`${stats.gamesWon}/${stats.gamesPlayed}`}
        />
        <StatCard
          icon={<Target className="h-5 w-5" />}
          label="Net Winnings"
          value={`${netWinnings.toFixed(2)} HBAR`}
          trend={netWinnings > 0 ? 'up' : 'down'}
        />
        <StatCard
          icon={<Zap className="h-5 w-5" />}
          label="Total Hands"
          value={stats.totalHands.toString()}
        />
      </div>

      {/* Detailed Stats */}
      <div className="grid md:grid-cols-2 gap-6">
        {/* Performance Stats */}
        <div className="border rounded-lg p-6">
          <h3 className="text-lg font-semibold mb-4">Performance</h3>
          <div className="space-y-3">
            <StatRow label="Games Played" value={stats.gamesPlayed} />
            <StatRow label="Games Won" value={stats.gamesWon} />
            <StatRow
              label="Total Winnings"
              value={`${stats.totalWinnings.toFixed(2)} HBAR`}
            />
            <StatRow
              label="Total Losses"
              value={`${stats.totalLosses.toFixed(2)} HBAR`}
            />
            <StatRow
              label="Biggest Pot"
              value={`${stats.biggestPot.toFixed(2)} HBAR`}
            />
            <StatRow
              label="Average Pot"
              value={`${stats.averagePot.toFixed(2)} HBAR`}
            />
          </div>
        </div>

        {/* Play Style Stats */}
        <div className="border rounded-lg p-6">
          <h3 className="text-lg font-semibold mb-4">Play Style</h3>
          <div className="space-y-3">
            <StatRow label="Favorite Action" value={stats.favoriteAction} />
            <StatRow label="Total Hands" value={stats.totalHands} />
            <StatRow
              label="Hands per Game"
              value={
                stats.gamesPlayed > 0
                  ? (stats.totalHands / stats.gamesPlayed).toFixed(1)
                  : '0'
              }
            />
            <StatRow
              label="Last Played"
              value={
                stats.lastPlayed > 0
                  ? new Date(stats.lastPlayed).toLocaleDateString()
                  : 'Never'
              }
            />
          </div>
        </div>
      </div>

      {/* Game History */}
      <div className="border rounded-lg p-6">
        <h3 className="text-lg font-semibold mb-4">Recent Games</h3>

        {history.length === 0 ? (
          <p className="text-sm text-muted-foreground">No games played yet</p>
        ) : (
          <div className="space-y-2">
            {history.map((game, idx) => (
              <div
                key={idx}
                className={cn(
                  'flex items-center justify-between p-3 rounded-lg transition-colors',
                  game.result === 'won'
                    ? 'bg-green-500/10 hover:bg-green-500/20'
                    : 'bg-red-500/10 hover:bg-red-500/20'
                )}
              >
                <div className="flex items-center gap-3">
                  <div
                    className={cn(
                      'px-3 py-1 rounded-full text-sm font-semibold',
                      game.result === 'won'
                        ? 'bg-green-500 text-white'
                        : 'bg-red-500 text-white'
                    )}
                  >
                    {game.result.toUpperCase()}
                  </div>
                  <div>
                    <p className="text-sm font-mono">
                      {game.gameId.slice(0, 10)}...
                    </p>
                    <p className="text-xs text-muted-foreground">
                      {new Date(game.timestamp).toLocaleDateString()}
                    </p>
                  </div>
                </div>
                <div className="text-right">
                  <p className="font-semibold">{game.pot.toFixed(2)} HBAR</p>
                  <p className="text-xs text-muted-foreground">
                    Position {game.position}
                  </p>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* HCS Badge */}
      <div className="text-center text-sm text-muted-foreground">
        <p>Statistics powered by Hedera Consensus Service</p>
        <p className="text-xs">Real-time aggregation from on-chain events</p>
      </div>
    </div>
  );
}

function StatCard({
  icon,
  label,
  value,
  trend,
}: {
  icon: React.ReactNode;
  label: string;
  value: string;
  trend?: 'up' | 'down';
}) {
  return (
    <div className="border rounded-lg p-4">
      <div className="flex items-center gap-2 mb-2 text-muted-foreground">
        {icon}
        <p className="text-sm">{label}</p>
      </div>
      <div className="flex items-end justify-between">
        <p className="text-2xl font-bold">{value}</p>
        {trend && (
          <div
            className={cn(
              'text-xs font-semibold',
              trend === 'up' ? 'text-green-500' : 'text-red-500'
            )}
          >
            {trend === 'up' ? '↑' : '↓'}
          </div>
        )}
      </div>
    </div>
  );
}

function StatRow({ label, value }: { label: string; value: string | number }) {
  return (
    <div className="flex items-center justify-between text-sm">
      <span className="text-muted-foreground">{label}</span>
      <span className="font-semibold">{value}</span>
    </div>
  );
}

/**
 * Leaderboard Component
 */
export function Leaderboard({ limit = 10 }: { limit?: number }) {
  const [players, setPlayers] = useState<PlayerStats[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    async function loadLeaderboard() {
      try {
        const data = await getLeaderboard(limit);
        setPlayers(data);
      } catch (error) {
        console.error('Failed to load leaderboard:', error);
      } finally {
        setLoading(false);
      }
    }

    loadLeaderboard();
  }, [limit]);

  if (loading) {
    return <Skeleton className="h-96 w-full" />;
  }

  return (
    <div className="border rounded-lg p-6">
      <h2 className="text-2xl font-bold mb-6">Leaderboard</h2>

      {players.length === 0 ? (
        <p className="text-muted-foreground">No players yet</p>
      ) : (
        <div className="space-y-2">
          {players.map((player, idx) => {
            const rank = getPlayerRank(player);
            return (
              <div
                key={idx}
                className={cn(
                  'flex items-center justify-between p-4 rounded-lg transition-colors hover:bg-muted/50',
                  idx === 0 && 'bg-yellow-500/10 border border-yellow-500/20',
                  idx === 1 && 'bg-gray-300/10 border border-gray-300/20',
                  idx === 2 && 'bg-orange-600/10 border border-orange-600/20'
                )}
              >
                <div className="flex items-center gap-4">
                  <div
                    className={cn(
                      'w-8 h-8 rounded-full flex items-center justify-center font-bold text-sm',
                      idx === 0 && 'bg-yellow-500 text-white',
                      idx === 1 && 'bg-gray-400 text-white',
                      idx === 2 && 'bg-orange-600 text-white',
                      idx > 2 && 'bg-muted text-foreground'
                    )}
                  >
                    {idx + 1}
                  </div>

                  <div>
                    <p className="font-mono text-sm">
                      {player.playerAddress.slice(0, 8)}...
                      {player.playerAddress.slice(-6)}
                    </p>
                    <p className="text-xs text-muted-foreground">{rank.name}</p>
                  </div>
                </div>

                <div className="text-right">
                  <p className="font-bold">
                    {player.totalWinnings.toFixed(2)} HBAR
                  </p>
                  <p className="text-xs text-muted-foreground">
                    {player.winRate.toFixed(1)}% WR
                  </p>
                </div>
              </div>
            );
          })}
        </div>
      )}
    </div>
  );
}
